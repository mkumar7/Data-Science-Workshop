1)
fig = plt.figure()
ax = fig.add_axes([.125, .125, .775, .755])
ax.hist(data = df, x = 'num_var')

_________________________________________________________________
2)
fig = plt.figure()
ax = fig.add_axes([.125, .125, .775, .755])
base_color = sb.color_palette()[0]
sb.countplot(data = df, x = 'cat_var', color = base_color, ax = ax)

____________________________________________________________________
3)
plt.figure(figsize = [10, 5]) # larger figure size for subplots

# example of somewhat too-large bin size
plt.subplot(1, 2, 1) # 1 row, 2 cols, subplot 1
bin_edges = np.arange(0, df['num_var'].max()+4, 4)
plt.hist(data = df, x = 'num_var', bins = bin_edges)

# example of somewhat too-small bin size
plt.subplot(1, 2, 2) # 1 row, 2 cols, subplot 2
bin_edges = np.arange(0, df['num_var'].max()+1/4, 1/4)
plt.hist(data = df, x = 'num_var', bins = bin_edges)

_________________________________________________________________________
4) Choosing a Plot for Discrete Data
plt.figure(figsize = [10, 5])

# histogram on the left, bin edges on integers
plt.subplot(1, 2, 1)
bin_edges = np.arange(2, 12+1.1, 1) # note `+1.1`, see below
plt.hist(die_rolls, bins = bin_edges)
plt.xticks(np.arange(2, 12+1, 1))

# histogram on the right, bin edges between integers
plt.subplot(1, 2, 2)
bin_edges = np.arange(1.5, 12.5+1, 1)
plt.hist(die_rolls, bins = bin_edges)
plt.xticks(np.arange(2, 12+1, 1))
__________________________________________________________________________
5)
bin_edges = np.arange(1.5, 12.5+1, 1)
plt.hist(die_rolls, bins = bin_edges, rwidth = 0.7)
plt.xticks(np.arange(2, 12+1, 1))

By adding gaps between bars, you emphasize the fact that the data is discrete in value. 
On the other hand, plotting your quantitative data in this manner might cause it to be 
interpreted as ordinal-type data, which can have an effect on overall perception.

For continuous numeric data, you should not make use of the "rwidth" parameter, since 
the gaps imply discreteness of value. As another caution, it might be tempting to use 
seaborn's countplot function to plot the distribution of a discrete numeric variable 
as bars. Be careful about doing this, since each unique numeric value will get a bar, 
regardless of the spacing in values between bars. (For example, if the unique values 
were {1, 2, 4, 5}, missing 3, countplot would only plot four bars, with the bars for 
2 and 4 right next to one another.) Also, even if your data is technically discrete 
numeric, you should probably not consider either of the variants depicted on this 
page unless the number of unique values is small enough to allow for the half-unit 
shift or discrete bars to be interpretable. If you have a large number of unique values 
over a large enough range, it's better to stick with the standard histogram than risk 
interpretability issues.

While you might justify plotting discrete numeric data using a bar chart, you’ll be less 
apt to justify the opposite: plotting ordinal data as a histogram. The space between bars 
in a bar chart helps to remind the reader that values are not contiguous in an ‘interval’
-type fashion: only that there is an order in levels. With that space removed as in a histogram, 
it's harder to remember this important bit of interpretation.

_______________________________________________________________________________________________________
6) Descriptive Statistics, Outliers, and Axis Limits

plt.figure(figsize = [10, 5])

# histogram on left: full data
plt.subplot(1, 2, 1)
bin_edges = np.arange(0, df['skew_var'].max()+2.5, 2.5)
plt.hist(data = df, x = 'skew_var', bins = bin_edges)

# histogram on right: focus in on bulk of data < 35
plt.subplot(1, 2, 2)
bin_edges = np.arange(0, 35+1, 1)
plt.hist(data = df, x = 'skew_var', bins = bin_edges)
plt.xlim(0, 35) # could also be called as plt.xlim((0, 35))

